<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 다른 mapper와 중복되지 않도록 네임스페이스 기재 -->

<mapper namespace="memberboard">
	
	<!-- rownum을 rn이란 문자로 줄여쓴다. 밑에 from문을 A로 줄여쓴다.  -->
  				<!-- 이 from문이 먼저 실행된 다음에 번호를 붙였기 때문에 일련번호가 다시 새로 매겨졌다. -->
        		<!--  이 안쪽의 쿼리가 가장 중요함 -->
        		
        		
<select id="listAll" resultType="com.example.hansub_project.model.board.dto.MemberBoardDTO">
<!-- 결과는 boardDTO타입이 된 -->
		<include refid="paging_header" /> 
		
		<!-- ref는 다른테이블을 의미한다. -->
		<!-- 번호, 제목, 작성자, 이름, 날짜, 조회수 , 그리고 댓글의 갯수를 검색 -->
		<!-- board 테이블과 member 테이블로 부터 검색 -->
			select member_bno, user_id, reg_date, viewcnt, title, 
			(select count(*) from member_reply where member_bno=b.member_bno) rcnt,
			content, recommend			
			from member_board b
			<!-- bno의 내림차순으로 검색 -->
			<!-- where절은 (조건)은 include 태그를 이용했음 -->
		<include refid="search" />
			order by member_bno desc
		<include refid="paging_footer" />		
	</select>
	
	
	<sql id="paging_header">
	<!-- 게시물을 한페이지에 10개씩 볼 수 있게하는 쿼리 윗부분-->
		select *
		from (
		    select rownum as rn, A.*
		    from (	
	</sql>
	
	
	<sql id="paging_footer">
	<!-- 게시물을 한페이지에 10개씩 볼 수 있게하는 쿼리  아랫 부분-->
	<!-- 새로 매겨진 일련번호 1~10번 글까지 1페이지 -->
	<!-- 11~20번 글까지 2페이지.. -->
		    ) A
		) where rn between #{start} and #{end}	
	</sql>
		
	
	<!-- 레코드 갯수 계산 -->	
	<select id="countArticle" resultType="int">
	<!-- 페이징 처리를 할때 만약 45개 글이 있으면 3개의 페이지만 나와야하는데 if문을 사용하지 않고 무조건 1을 더하면 비어있는 페이지인 4페이지까지
	출력이 되기때문에 if문을 사용해서 처리한다. -->
		select case when count(*) / 15 = 0 then count(*) / 15 + 1
		else count(*) / 15 end from member_board
		<include refid="search" />
	</select>
	

<sql id="search">
        <choose>
          
            <when test="search_option == 'all' ">
                where  
                      user_id like '%'||#{keyword}||'%'
                      or content like '%' || #{keyword}||'%'
                      or title like '%'||#{keyword}||'%'   
            </when>
            <otherwise>
                where ${search_option} like '%'||#{keyword}||'%'
            </otherwise>
        </choose>
    </sql>



<insert id = "insert">
<!-- 게시글 번호는 시퀀스로 하지말고 최대값 +1로 게시글 번호를 설정함 -->
<!-- 시퀀스로 할 경우 글이 삭제될시 번호가 꼬일 수 있기 때문에 -->
<!-- 제목, 글내용, 작성자를 삽입함 -->
insert into member_board (member_bno, title, content, user_id) values
        ( (select nvl(max(member_bno),0)+1 from member_board), #{title}, #{content}, #{user_id} )
</insert>



<!-- 조회수 증가처리를 하는 구문 -->
<update id = "increaseViewcnt">
<!-- 글번호에 해당하는 조회수를 +1하는 쿼리문 -->
update member_board set viewcnt=viewcnt+1
where member_bno=#{member_bno}
</update>



<!-- 게시글 상세정보를 확인하는 쿼리문 -->
<select id = "read" resultType = "com.example.hansub_project.model.board.dto.MemberBoardDTO">

<!-- member_board테이블의 작성자와 member테이블의 아이디가 같고, 글번호가 클릭한 글번호와 같은 글번호와 같은
글번호, 제목, 조회수, 날짜, 내용, 이름, 작성자를 검색한다. -->
select member_bno, title, reg_date, content, viewcnt, user_id
from member_board
where member_bno=#{member_bno}

</select>


<!-- 게시물 삭제 관련 쿼리 -->

<delete id = "deleteArticle">
	delete from member_board where member_bno=#{member_bno}
</delete>


<!-- 게시글 수정 관련 쿼리 -->

<update id = "update">
update member_board
	set title=#{title},content=#{content}
	where member_bno=#{member_bno}

</update>



<!-- 게시글 추천 관련 쿼리 -->

<update id = "recommend">
update member_board
set recommend = recommend+1 
where member_bno = #{member_bno} 
</update>





</mapper>
